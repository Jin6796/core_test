/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package wai.com.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import wai.com.service.UserMngtService;
import wai.com.util.StringUtil;

/**
 * @Class Name : UserMngtController.java
 * @Description : UserMngt Controller Class
 * @Modification Information
 * @
 * @  수정일      수정자              수정내용
 * @ ---------   ---------   -------------------------------
 * @ 2022.05.19           최초생성
 *
 * @author 코아뱅크 기술연구소
 * @since 2022.05.19
 * @version 1.0
 * @see
 *
 * Copyright (C) by COREBANK All right reserved.
 */

@Controller
public class UserMngtController {

	/** UserMngtService */
	@Autowired
	private UserMngtService userMngtService;

	/**
	 * 사용자 등록
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userRegist.do")
	@ResponseBody
	public Map<String, Object> userReg(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			String user_id = (String) paramMap.get("user_id");
			String user_pw = (String) paramMap.get("password");
			if (user_id == null || user_id.equals("")) {
				procRs = false;
				errMsg = "User ID is NULL.";
				return map;
			}
			if (user_pw == null || user_pw.equals("")) {
				procRs = false;
				errMsg = "Password is NULL.";
				return map;
			}
			
			Map<String, Object> inMap = new HashMap<String, Object>();
			inMap.put("user_id",	user_id);
			inMap.put("password",	StringUtil.encrypt(user_id, user_pw));
			inMap.put("user_name",	(String) paramMap.get("user_name"));
			inMap.put("phone",		(String) paramMap.get("phone"));
			inMap.put("email",		(String) paramMap.get("email"));
			inMap.put("active_yn",	"Y");
			inMap.put("admin_yn",	"N");
			inMap.put("reg_user",	(String) paramMap.get("reg_user"));
			inMap.put("upd_user",	(String) paramMap.get("upd_user"));
			
			int rs = userMngtService.registUser(inMap);
			if (rs == 1) {
				HashMap<String, Object> rsHm = new HashMap<String, Object>() ;
				rsHm.put("tran", true);
				map.put("errCd", 0);
				map.put("data", rsHm);				
			} else {
				procRs = false;
				errMsg = "Regist fail.";
				map.put("errCd", -1);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}

	/**
	 * 사용자 수정
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userUpdate.do")
	@ResponseBody
	public Map<String, Object> userUpd(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			String user_id = (String) paramMap.get("user_id");
			String user_pw = (String) paramMap.get("password");
			if (user_pw == null || user_pw.equals("")) {
				procRs = false;
				errMsg = "Password is NULL.";
				return map;
			}
			
			Map<String, Object> inMap = new HashMap<String, Object>();
			inMap.put("user_id", user_id);
			inMap.put("password", StringUtil.encrypt(user_id, user_pw));
			inMap.put("user_name", (String) paramMap.get("user_name"));
			inMap.put("phone", (String) paramMap.get("phone"));
			inMap.put("email", (String) paramMap.get("email"));
			inMap.put("active_yn", (String) paramMap.get("active_yn"));
			
			int rs = userMngtService.updateUser(inMap);
			if (rs == 1) {
				HashMap<String, Object> rsHm = new HashMap<String, Object>() ;
				rsHm.put("tran", true);
				map.put("errCd", 0);
				map.put("data", rsHm);
			} else {
				procRs = false;
				errMsg = "Update fail.";
				map.put("errCd", -1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}
	
	/**
	 * 사용자 삭제
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userDelete.do")
	@ResponseBody
	public Map<String, Object> userDel(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			boolean result = true;
			List<String> mgSeqs = (List<String>) paramMap.get("user_id");
	        for (String userId : mgSeqs) {
	        	HashMap<String, Object> inMap = new HashMap<String, Object>();
	        	inMap.put("user_id", userId);
				int rs = userMngtService.deleteUser(inMap);
				if (rs < 1) { result = false; }
	        }
			
	        if (result == true) {
	        	map.put("errCd", 0);
				map.put("data", result);	        	
	        } else {
	        	procRs = false;
				errMsg = "Delete fail.";
	        }
			
		}
		catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}

	/**
	 * 사용자 목록 조회
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userListInquiry.do")
	@ResponseBody
	public Map<String, Object> userListInq(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HashMap<String, Object> inMap = new HashMap<String, Object>();
			inMap.put("user_id", paramMap.get("user_id"));
			inMap.put("user_name", paramMap.get("user_name"));
			List<Map<String, Object>> outList = userMngtService.selectUserList(inMap);
//			System.out.println("outList --> " + outList);
//			for (int i=0;i<outList.size(); i++) {
//				System.out.println(i+":"+outList.get(i));
//			}
			
			map.put("errCd", 0);
			map.put("data", outList);
		}
		catch (Exception e) {
			e.printStackTrace();
			map.put("errCd", -1);
			map.put("errMsg", "Transaction Error");
			map.put("data", null);
		}
		return map;
	}
	
	/**
	 * 사용자 존재 여부 조회
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userCheck.do")
	@ResponseBody
	public Map<String, Object> userChkInq(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			HashMap<String, Object> outHm = userMngtService.selectUserChk(paramMap);
			if (outHm == null) {
				map.put("errCd", 0);
				map.put("data", true);
						
			} else {
				procRs = false;
				errMsg = "사용할 수 없는 ID 입니다.";
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
			}
		}
		return map;
	}

	/**
	 * 사용자 로그인
	 * @param 
	 * @param Map
	 * @return Map
	 * @exception Exception
	 */
	@RequestMapping(value = "/userLogin.do")
	@ResponseBody
	public Map<String, Object> userLogin(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			String user_id = (String) paramMap.get("user_id");
			String user_pw = (String) paramMap.get("password");

			Map<String, Object> inMap = new HashMap<String, Object>();
			inMap.put("user_id", user_id);
			HashMap<String, Object> outHm = userMngtService.userInq(inMap);
			if (outHm == null) {
				procRs = false;
				errMsg = "ID 또는 비밀번호를 잘못입력했습니다.";
				return map;
			}
			
			if (outHm.get("ACTIVE_YN").equals("N")) {
				procRs = false;
				errMsg = "사용할 수 없는 계정입니다.";
				return map;
			}
			
			String select_pw = StringUtil.decrypt(user_id, (String) outHm.get("PASSWORD"));
			if (user_pw.equals(select_pw)) {
				HashMap<String, Object> rsHm = new HashMap<String, Object>() ; 
				rsHm.put("tran", true);
				rsHm.put("data", outHm);
				map.put("errCd", 0);
				map.put("data", rsHm);
				
				// login success
				userMngtService.userUpdLastLoginUpd(inMap);
			}
			else {
				procRs = false;
				errMsg = "ID 또는 비밀번호를 잘못입력했습니다.";
				return map;
			}
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
			}
		}
		return map;
	}
	
	/** 게시글 전체 조회 */
	@CrossOrigin
	@RequestMapping(value = "/selectBoardTest.do")
	@ResponseBody
	public Map<String, Object> selectBoardTest(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			// 검색 창에 입력하는 값 출력
			System.out.println("게시글 전체조회: " + paramMap.get("subject"));
			
			// @RequestParam Map<String,Object> pMap
			Map<String,Object> inMap = new HashMap<String, Object>();
			
			inMap.put("subject", paramMap.get("subject")); 
			
			List<Map<String, Object>> outList = userMngtService.selectBoardTestList(inMap);
			
			map.put("errCd", 0);
			map.put("data", outList);	
			
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
			}
		}
		return map;
	}
	
	/** 게시글 상세 조회 */
	@CrossOrigin
	@RequestMapping("/selectBoardTestDetail.do")
	@ResponseBody
	public Map<String, Object> selectBoardTestDetail(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			System.out.println("게시글 상세조회: " + paramMap.get("post_id"));
			
			Map<String,Object> inMap = new HashMap<String, Object>();
			
			
			inMap.put("post_id", paramMap.get("post_id")); 
			
			Map<String, Object> content = userMngtService.selectBoardTestDetail(inMap);
			
			map.put("errCd", 0);
			map.put("data", content);	
			
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
			System.out.println(errMsg);
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
				System.out.println(errMsg);
			}
		}
		return map;
	}
	
	/** 게시글 등록하기 */
	@CrossOrigin
	@RequestMapping(value = "/selectBoardTestInsert.do")
	@ResponseBody
	public Map<String, Object> selectBoardTestInsert(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {

			Map<String, Object> inMap = new HashMap<String, Object>();
			
			inMap.put("subject",	(String) paramMap.get("subject"));
			inMap.put("reg_user",	(String) paramMap.get("reg_user"));
			inMap.put("content",	(String) paramMap.get("content"));
			
			System.out.println("게시글 작성하기: " + paramMap.get("subject"));
			
			int rs = userMngtService.selectBoardTestInsert(inMap);
			
			System.out.println("Insert rs: " + rs);

			if (rs == 1) {
				HashMap<String, Object> rsHm = new HashMap<String, Object>() ;
				rsHm.put("tran", true);
				map.put("errCd", 0);
				map.put("data", rsHm);				
			} else {
				procRs = false;
				errMsg = "fail.";
				map.put("errCd", -1);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}
	
	/** 게시글 수정*/
	@CrossOrigin
	@RequestMapping(value = "/selectBoardTestUpdate.do")
	@ResponseBody
	public Map<String, Object> selectBoardTestUpdate(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			Map<String, Object> inMap = new HashMap<String, Object>();
			
			inMap.put("post_id",	(String) paramMap.get("post_id"));
			inMap.put("subject",	(String) paramMap.get("subject"));
			inMap.put("content",	(String) paramMap.get("content"));
			inMap.put("upd_user",	(String) paramMap.get("upd_user"));
			
			System.out.println("게시글 수정하기: " + paramMap.get("subject"));
//			=================================================================
			int rs = userMngtService.selectBoardTestUpdate(inMap);

			if (rs == 1) {
				HashMap<String, Object> rsHm = new HashMap<String, Object>() ;
				rsHm.put("tran", true);
				map.put("errCd", 0);
				map.put("data", rsHm);
			} else {
				procRs = false;
				errMsg = "Update fail.";
				map.put("errCd", -1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}
	
	/** 게시글 삭제 */
	@CrossOrigin
	@RequestMapping(value = "/selectBoardTestDelete.do")
	@ResponseBody
	public Map<String, Object> selectBoardTestDelete(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";

		try {
			boolean result = true;
			
			System.out.println("게시글 삭제: " + paramMap.get("post_id"));
			
			List<String> mgSeqs = (List<String>) paramMap.get("post_id");
			
			for (String post_id : mgSeqs) {
	        	HashMap<String, Object> inMap = new HashMap<String, Object>();
	        	
				inMap.put("post_id",	(String) paramMap.get("post_id"));

	        	
				int rs = userMngtService.selectBoardTestDelete(inMap);
				if (rs < 1) { result = false; }
	        }
			
	        if (result == true) {
	        	map.put("errCd", 0);
				map.put("data", result);	        	
	        } else {
	        	procRs = false;
				errMsg = "Delete fail.";
	        }
		}
		catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);
			}
		}
		return map;
	}

	/** 일별 게시글 조회 */
	@CrossOrigin
	@RequestMapping(value = "/BoardTestSBday.do")
	@ResponseBody
	public Map<String, Object> BoardTestSBday(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			// 검색 창에 입력하는 값 출력
			System.out.println("해당 날짜 게시글 조회: " + paramMap.get("reg_date"));
			
			// @RequestParam Map<String,Object> pMap
			Map<String,Object> inMap = new HashMap<String, Object>();
			
			inMap.put("reg_date", paramMap.get("reg_date")); 
			
			List<Map<String, Object>> outList = userMngtService.BoardTestSBday(inMap);
			
			map.put("errCd", 0);
			map.put("data", outList);	
			
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
			}
		}
		return map;
	}
	
	/** 일별 작성자 게시글 합계 */
	@CrossOrigin
	@RequestMapping(value = "/BoardTestSBdaySelect.do")
	@ResponseBody
	public Map<String, Object> BoardTestSBdaySelect(@RequestBody Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean procRs = true;
		String errMsg = "";
		try {
			// 검색 창에 입력하는 값 출력
			System.out.println("작성자별 게시글 수   조회: " + paramMap.get("reg_date"));
			
			// @RequestParam Map<String,Object> pMap
			Map<String,Object> inMap = new HashMap<String, Object>();
			
			inMap.put("reg_date", paramMap.get("reg_date")); 
			
			List<Map<String, Object>> outList = userMngtService.BoardTestSBdaySelect(inMap);
			
			map.put("errCd", 0);
			map.put("data", outList);	
			
		} catch (Exception e) {
			e.printStackTrace();
			procRs = false;
			errMsg = "Transaction Error";
		} finally {
			if (!procRs) {
				map.put("errCd", -1);
				map.put("errMsg", errMsg);
				map.put("data", null);				
			}
		}
		return map;
	}

}